# Copy this file to .env and fill in your values
# ======================================================
# Flask Configuration
# ======================================================
FLASK_ENV=production
SECRET_KEY=change-this-to-a-random-secret-key

# Public base URL where Alexa can reach your server (HTTPS required for production)
PUBLIC_BASE_URL=https://your.domain.example

# ======================================================
# Media Request Backend Configuration
# ======================================================
# Supports: Overseerr, Jellyseerr, and Ombi
# The backend type is auto-detected based on the API endpoint

# Base URL for your media request service
MEDIA_BACKEND_URL=https://request.example.com

# API Key for your media request service
# - Overseerr/Jellyseerr: Found in Settings > General > API Key
# - Ombi: Found in Settings > Ombi > API Key
MEDIA_BACKEND_API_KEY=your-api-key-here

# Mock mode (simulate backend responses for local testing without a real instance)
# Set to 'true' for development/testing
MOCK_BACKEND=false

# ======================================================
# Database Configuration
# ======================================================
# Database URL (SQLite by default, supports PostgreSQL, MySQL, etc.)
DATABASE_URL=sqlite:///./overtalkerr.db
# Alternative examples:
# DATABASE_URL=postgresql://user:password@localhost/overtalkerr
# DATABASE_URL=mysql://user:password@localhost/overtalkerr

# Session state TTL in hours (conversations older than this will be cleaned up)
SESSION_TTL_HOURS=24

# ======================================================
# Security Configuration
# ======================================================
# Basic Auth for /test endpoints (only enforced for non-local requests)
# Leave empty to disable authentication (not recommended for public deployments)
BASIC_AUTH_USER=
BASIC_AUTH_PASS=

# ======================================================
# Logging Configuration
# ======================================================
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log format: 'json' (recommended for production) or 'text' (better for development)
LOG_FORMAT=json
